/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.john.core;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AlertQuery extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3280402504228969361L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AlertQuery\",\"namespace\":\"com.john.core\",\"fields\":[{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"queryMap\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String userId;
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> queryMap;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AlertQuery() {}

  /**
   * All-args constructor.
   * @param userId The new value for userId
   * @param queryMap The new value for queryMap
   */
  public AlertQuery(java.lang.String userId, java.util.Map<java.lang.String,java.lang.String> queryMap) {
    this.userId = userId;
    this.queryMap = queryMap;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return queryMap;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = (java.lang.String)value$; break;
    case 1: queryMap = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'queryMap' field.
   * @return The value of the 'queryMap' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getQueryMap() {
    return queryMap;
  }

  /**
   * Sets the value of the 'queryMap' field.
   * @param value the value to set.
   */
  public void setQueryMap(java.util.Map<java.lang.String,java.lang.String> value) {
    this.queryMap = value;
  }

  /**
   * Creates a new AlertQuery RecordBuilder.
   * @return A new AlertQuery RecordBuilder
   */
  public static com.john.core.AlertQuery.Builder newBuilder() {
    return new com.john.core.AlertQuery.Builder();
  }

  /**
   * Creates a new AlertQuery RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AlertQuery RecordBuilder
   */
  public static com.john.core.AlertQuery.Builder newBuilder(com.john.core.AlertQuery.Builder other) {
    return new com.john.core.AlertQuery.Builder(other);
  }

  /**
   * Creates a new AlertQuery RecordBuilder by copying an existing AlertQuery instance.
   * @param other The existing instance to copy.
   * @return A new AlertQuery RecordBuilder
   */
  public static com.john.core.AlertQuery.Builder newBuilder(com.john.core.AlertQuery other) {
    return new com.john.core.AlertQuery.Builder(other);
  }

  /**
   * RecordBuilder for AlertQuery instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AlertQuery>
    implements org.apache.avro.data.RecordBuilder<AlertQuery> {

    private java.lang.String userId;
    private java.util.Map<java.lang.String,java.lang.String> queryMap;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.john.core.AlertQuery.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.queryMap)) {
        this.queryMap = data().deepCopy(fields()[1].schema(), other.queryMap);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AlertQuery instance
     * @param other The existing instance to copy.
     */
    private Builder(com.john.core.AlertQuery other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.queryMap)) {
        this.queryMap = data().deepCopy(fields()[1].schema(), other.queryMap);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.john.core.AlertQuery.Builder setUserId(java.lang.String value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.john.core.AlertQuery.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'queryMap' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getQueryMap() {
      return queryMap;
    }

    /**
      * Sets the value of the 'queryMap' field.
      * @param value The value of 'queryMap'.
      * @return This builder.
      */
    public com.john.core.AlertQuery.Builder setQueryMap(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[1], value);
      this.queryMap = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'queryMap' field has been set.
      * @return True if the 'queryMap' field has been set, false otherwise.
      */
    public boolean hasQueryMap() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'queryMap' field.
      * @return This builder.
      */
    public com.john.core.AlertQuery.Builder clearQueryMap() {
      queryMap = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public AlertQuery build() {
      try {
        AlertQuery record = new AlertQuery();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.String) defaultValue(fields()[0]);
        record.queryMap = fieldSetFlags()[1] ? this.queryMap : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
